{"version":3,"sources":["lookup/components.js","projects/components.js","App.js","serviceWorker.js","index.js"],"names":["loadProjects","axios","get","then","response","catch","error","Promise","reject","ProjectComponent","props","className","useState","newProjects","setNewProjects","isClicked","setIsClicked","refTitle","useRef","refDescription","onSubmit","event","preventDefault","title","current","value","description","tempNewProjects","unshift","id","begin_date","Date","now","user","username","ref","required","name","placeholder","type","onClick","ProjectsList","projectsInit","setProjectsInit","projects","setProjects","useEffect","final","concat","length","status","data","console","log","map","item","index","project","key","Project","ActionMemberBtns","alertMessage","setAlertMessage","alertStatus","setAlertStatus","refMemberForm","doAddRemove","action","member","post","headers","actionMemberPost","errorMessage","undefined","message","role","App","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRACaA,EAAe,WACxB,OAAOC,IAAMC,IAAI,uCAChBC,MAAK,SAACC,GACL,OAAOA,KAERC,OAAM,SAAAC,GACL,OAAOC,QAAQC,OAAOF,OCFfG,EAAmB,SAACC,GAAW,IACjCC,EAAaD,EAAbC,UADgC,EAEDC,mBAAS,IAFR,mBAEhCC,EAFgC,KAEnBC,EAFmB,OAsBLF,oBAAS,GAtBJ,mBAsBhCG,EAtBgC,KAsBrBC,EAtBqB,KAwBjCC,EAAWC,mBACXC,EAAiBD,mBAEvB,OAAO,yBAAKP,UAAWA,GACf,yBAAKA,UAAU,oDACX,0BAAMS,SA1BG,SAACC,GAClBA,EAAMC,iBACN,IAAMC,EAAQN,EAASO,QAAQC,MACzBC,EAAcP,EAAeK,QAAQC,MAEvCE,EAAe,YAAOd,GAE1Bc,EAAgBC,QAAQ,CACpBL,MAAOA,EACPG,YAAaA,EACbG,GAAI,KACJC,WAAYC,KAAKC,MACjBC,KAAM,CAACC,SAAU,mBAErBpB,EAAea,GACfV,EAASO,QAAQC,MAAQ,GACzBN,EAAeK,QAAQC,MAAQ,KAWdV,EACD,8BAAUoB,IAAKlB,EAAUmB,UAAU,EAAMC,KAAK,QAAQ1B,UAAU,oBAAoB2B,YAAY,iBAC9F,KACDvB,EACD,8BAAUoB,IAAKhB,EAAgBiB,UAAU,EAAMC,KAAK,cAAc1B,UAAU,eAAe2B,YAAY,gBACrG,KACN,yBAAK3B,UAAU,iBACVI,EACD,4BAAQwB,KAAK,SAAS5B,UAAU,6BAAhC,UACE,KACDI,EACD,4BAAQyB,QAAS,WACjBxB,GAAa,IACXuB,KAAK,SAAS5B,UAAU,+BAF1B,UAGE,KACAI,EAIA,KAHF,4BAAQyB,QAAS,WACjBxB,GAAa,IACVuB,KAAK,SAAS5B,UAAU,6BAF3B,yBAOZ,kBAAC,EAAD,CAAcE,YAAaA,MAK1B4B,EAAe,SAAC/B,GAAW,IAAD,EACCE,mBAAS,IADV,mBAChC8B,EADgC,KAClBC,EADkB,OAEP/B,mBAAS,IAFF,mBAEhCgC,EAFgC,KAEtBC,EAFsB,KAoBvC,OAhBAC,qBAAU,WACN,IAAMC,EAAQ,YAAIrC,EAAMG,aAAamC,OAAON,GACxCK,EAAME,SAAWL,EAASK,QAC1BJ,EAAYE,KAEjB,CAACL,EAAcE,EAAUlC,EAAMG,cAElCiC,qBAAU,WACN9C,IAAeG,MAAK,SAAAC,GACG,MAApBA,EAAS8C,QACRP,EAAgBvC,EAAS+C,SAE1B9C,OAAM,SAAAC,GACT8C,QAAQC,IAAI/C,QAEb,IACIsC,EAASU,KAAI,SAACC,EAAMC,GACvB,OAAO,kBAAC,EAAD,CAASC,QAAWF,EAAMG,IAAG,UAAKF,EAAL,kBAK3BG,EAAU,SAACjD,GAAW,IAC5B+C,EAAW/C,EAAX+C,QAEP,OAAO,yBAAK9C,UAAU,2BAElB,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,aACf,wBAAIA,UAAU,cAAc8C,EAAQlC,OACpC,wBAAIZ,UAAU,cAAd,YAAqC8C,EAAQ3B,YAC7C,wBAAInB,UAAU,cAAd,iBAA0C8C,EAAQxB,KAAKC,UACvD,uBAAGvB,UAAU,aAAa8C,EAAQ/B,aAClC,kBAAC,EAAD,CAAkB+B,QAASA,QAMtBG,EAAmB,SAAClD,GAAW,IACjC+C,EAAW/C,EAAX+C,QADgC,EAEL7C,oBAAS,GAFJ,mBAEhCG,EAFgC,KAErBC,EAFqB,OAGCJ,mBAAS,IAHV,mBAGhCiD,EAHgC,KAGlBC,EAHkB,OAIDlD,mBAAS,GAJR,mBAIhCmD,EAJgC,KAInBC,EAJmB,KAKjCC,EAAgB/C,mBAEhBgD,EAAc,SAACC,GACjB,IAAIC,EAASH,EAAczC,QAAQC,MACpB,KAAX2C,GACAN,EAAgB,4BAChBE,EAAe,ID1GK,SAACtD,GAAW,IAKtCyC,EAAO,CACTtB,GAL6BnB,EAAvBmB,GAMNsC,OAN6BzD,EAAnByD,OAOVC,OAP6B1D,EAAX0D,QASpB,OAAOnE,IAAMoE,KAAK,6CAA8ClB,EARnD,CACXmB,QAAS,KAQVnE,MAAK,SAACC,GACL,OAAOA,KAERC,OAAM,SAAAC,GACL,OAAOC,QAAQC,OAAOF,MC8FdiE,CAAiBd,EAAQ5B,IACxB1B,MAAK,SAAAC,GACF,IAAIyD,EAAe,WACI,MAApBzD,EAAS8C,QAAsC,MAApB9C,EAAS8C,SACpB,QAAXiB,GAEAN,EAAe,iBAAmBO,EAAS,wBAC3CH,EAAczC,QAAQC,MAAQ,IAE9BoC,EAAe,iBAAmBO,EAAS,4BAE/CN,EAAgBD,GAChBG,EAAe,GACfC,EAAczC,QAAQC,MAAQ,OAGrCpB,OAAM,SAAAC,GACH,IAAIkE,EAAe,GAGXA,OAF4BC,IAAhCnE,EAAMF,SAAS+C,KAAKuB,QACU,MAA1BpE,EAAMF,SAAS8C,OACA,wCAEA5C,EAAMoE,QAGV,mBAAqBpE,EAAMF,SAAS+C,KAAKuB,QAE5DZ,EAAgBU,GAChBR,EAAe,OAI3B,OAAO,oCACc,IAAhBD,EACG,yBAAKpD,UAAU,sBAAsBgE,KAAK,SAASd,GACrD,KAEe,IAAhBE,EACG,yBAAKpD,UAAU,qBAAqBgE,KAAK,SAASd,GACpD,KAEF,8BACC9C,EACG,8BAAUqB,UAAU,EAAMzB,UAAU,cAAcwB,IAAK8B,EAAgB3B,YAAY,mBACrF,MAGF,yBAAK3B,UAAU,iBACVI,EACG,4BAAQyB,QAAS,WACb0B,EAAY,QACbvD,UAAU,+BAFb,gBAGF,KAEDI,EACG,4BAAQyB,QAAS,WACb0B,EAAY,WACbvD,UAAU,8BAFb,eAGF,KAEAI,EAKA,KAJE,4BAAQyB,QAAS,WACbxB,GAAa,GACbgD,EAAe,IAChBrD,UAAU,4BAHb,sBAMHI,EACG,4BAAQyB,QAAS,WACbyB,EAAczC,QAAQC,MAAQ,GAC9BT,GAAa,GACbgD,EAAe,IAChBrD,UAAU,6BAJb,UAKF,QC9KCiE,MAZf,WACE,OACE,yBAAKjE,UAAU,OACb,4BAAQA,UAAU,eAElB,6BACI,kBAAC,EAAD,SCDUkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAQC,SAASC,eAAe,QAClCF,GACFG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFL,GDuHE,kBAAmBM,WACrBA,UAAUC,cAAcC,MACrBvF,MAAK,SAAAwF,GACJA,EAAaC,gBAEdvF,OAAM,SAAAC,GACL8C,QAAQ9C,MAAMA,EAAMoE,c","file":"static/js/main.3fd21075.chunk.js","sourcesContent":["import axios from 'axios';\nexport const loadProjects = () => {\n    return axios.get('http://127.0.0.1:8000/api/projects/')\n    .then((response) => {\n      return response\n    })\n    .catch(error => {\n      return Promise.reject(error);\n    });\n}\n\nexport const actionMemberPost = (props) => {\n  const { id, action, member } = props;\n  let config = {\n    headers: {}\n  }\n  let data = {\n    id: id,\n    action: action,\n    member: member,\n  }\n  return axios.post('http://127.0.0.1:8000/api/projects/action/', data, config)\n  .then((response) => {\n    return response\n  })\n  .catch(error => {\n    return Promise.reject(error);\n  });\n}","import React, { useEffect, useState, useRef } from 'react';\nimport { loadProjects, actionMemberPost } from '../lookup';\n  \n\n// All code blow for creating new project\nexport const ProjectComponent = (props) => {\n    const {className} = props\n    const [newProjects, setNewProjects] = useState([])\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const title = refTitle.current.value\n        const description = refDescription.current.value\n\n        let tempNewProjects = [...newProjects]\n        //change this to a server side call\n        tempNewProjects.unshift({ //newwest on top\n            title: title,\n            description: description,\n            id: 3333,\n            begin_date: Date.now(),\n            user: {username: 'cobyforrester'}\n        })\n        setNewProjects(tempNewProjects)\n        refTitle.current.value = ''\n        refDescription.current.value = ''\n    }\n\n    const [isClicked, setIsClicked] = useState(false)\n    \n    const refTitle = useRef();\n    const refDescription = useRef();\n\n    return <div className={className}>\n            <div className='create-project-form col-md-4 mx-auto col-10 my-3'>   \n                <form onSubmit={handleSubmit}>\n                        {isClicked ? \n                        <textarea ref={refTitle} required={true} name='title' className='form-control my-3' placeholder='Project Name'></textarea>\n                        : null }\n                        {isClicked ? \n                        <textarea ref={refDescription} required={true} name='description' className='form-control' placeholder='Description'></textarea>\n                        : null }\n                    <div className='btn btn-group'>\n                        {isClicked ? \n                        <button type='submit' className='btn btn-warning my-2 mx-1'>Submit</button>\n                        : null }\n                        {isClicked ? \n                        <button onClick={() => {\n                        setIsClicked(false)\n                        }}type='submit' className='btn btn-secondary my-2 mx-1'>Cancel</button>\n                        : null }\n                        {!isClicked ? \n                        <button onClick={() => {\n                        setIsClicked(true)\n                        }} type='submit' className='btn btn-success my-2 mx-1'>Create New Project</button>\n                        : null }\n                    </div>\n                </form>\n            </div>\n            <ProjectsList newProjects={newProjects} />\n        </div>\n    }\n\n// All Below for box view\nexport const ProjectsList = (props) => {\nconst [projectsInit, setProjectsInit] = useState([])\nconst [projects, setProjects] = useState([])\n\nuseEffect(() => { //if property changes combine initial projects with what is added\n    const final = [...props.newProjects].concat(projectsInit)\n    if (final.length !== projects.length) {\n        setProjects(final)\n    }\n}, [projectsInit, projects, props.newProjects])\n\nuseEffect(() => {\n    loadProjects().then(response => {\n    if(response.status === 200){\n        setProjectsInit(response.data);\n    }\n    }).catch(error => {\n    console.log(error)\n    });\n}, []);\nreturn projects.map((item, index) => {\n    return <Project project = {item} key={`${index}-item.id`} />\n\n})\n}\n\nexport const Project = (props) => {\nconst {project} = props;\n\nreturn <div className='col-10 mx-auto col-md-6'>\n\n    <div className=\"card border mb-4 mt-4\">\n        <div className=\"card-body\">\n        <h2 className=\"card-title\">{project.title}</h2>\n        <h5 className=\"card-title\">Started: {project.begin_date}</h5>\n        <h5 className=\"card-title\">Project Owner {project.user.username}</h5>\n        <p className=\"card-text\">{project.description}</p>\n        <ActionMemberBtns project={project} />\n        </div>\n    </div>\n</div>\n}\n\nexport const ActionMemberBtns = (props) => {\n    const {project} = props\n    const [isClicked, setIsClicked] = useState(false)\n    const [alertMessage, setAlertMessage] = useState('')\n    const [alertStatus, setAlertStatus] = useState(0) // 0 is nothing, 1 is success, 2 is failure\n    const refMemberForm = useRef();\n\n    const doAddRemove = (action) => {\n        let member = refMemberForm.current.value\n        if (member === '') {\n            setAlertMessage('Error: No username typed')\n            setAlertStatus(2)\n        }\n        else {\n            actionMemberPost(project.id, action, member)\n            .then(response => {\n                let alertMessage = 'Success!'\n                if(response.status === 200 || response.status === 201){\n                    if (action === 'add') {\n\n                        alertMessage = 'Success! User ' + member + ' was added to project'\n                        refMemberForm.current.value = ''\n                    } else {\n                        alertMessage = 'Success! User ' + member + ' was removed from project'\n                    }\n                    setAlertMessage(alertMessage)\n                    setAlertStatus(1)\n                    refMemberForm.current.value = ''\n                }\n            })\n            .catch(error => {\n                let errorMessage = ''\n                if (error.response.data.message === undefined) {\n                    if (error.response.status === 403) {\n                        errorMessage = 'Database Error: You are not logged in'\n                    }else {\n                        errorMessage = error.message\n                    }\n                }else {\n                    errorMessage = 'Database Error: ' + error.response.data.message\n                }\n                setAlertMessage(errorMessage)\n                setAlertStatus(2)\n            });\n        }\n    }\n    return <>\n        {alertStatus === 1 ? \n            <div className='alert alert-success' role=\"alert\">{alertMessage}</div>\n        : null}\n\n        {alertStatus === 2 ? \n            <div className='alert alert-danger' role=\"alert\">{alertMessage}</div>\n        : null}\n\n        <form>\n        {isClicked ? \n            <textarea required={true} className='member-form' ref={refMemberForm}  placeholder=\"Enter Username\"></textarea>\n        : null}\n        </form>\n\n        <div className='btn btn-group'>\n            {isClicked ? \n                <button onClick={() => {\n                    doAddRemove('add');\n                }} className='btn btn-success btn-sm mx-1'>Add Username</button>\n            : null}\n\n            {isClicked ?\n                <button onClick={() => {\n                    doAddRemove('remove');\n                }} className='btn btn-danger btn-sm mx-1'>Remove User</button>\n            : null}\n\n            {!isClicked ? \n                <button onClick={() => {\n                    setIsClicked(true)\n                    setAlertStatus(0)\n                }} className='btn btn-info btn-sm mx-1' >Add/Remove Members</button>\n            : null}\n\n            {isClicked ? \n                <button onClick={() => {\n                    refMemberForm.current.value = ''\n                    setIsClicked(false)\n                    setAlertStatus(0)\n                }} className='btn btn-light btn-sm mx-1' >Cancel</button>\n            : null}\n\n        </div>\n        </>\n}\n// All below for table view\n\nexport const ProjectsListAsTable = (props) => {\n    const [projects, setProjects] = useState([])\n    useEffect(() => {\n        loadProjects().then(response => {\n        if(response.status === 200){\n            setProjects(response.data);\n        }\n        }).catch(error => {\n        console.log(error)\n        });\n    }, []);\n    return <div className='container'>\n        <table className=\"table table-striped table-hover\">\n        <thead>\n          <tr>\n            <th scope=\"col\">#</th>\n            <th scope=\"col\">Title</th>\n            <th scope=\"col\">Owner</th>\n            <th scope=\"col\">Members</th>\n          </tr>\n        </thead>\n        <tbody>\n            {projects.map((item, index) => \n                <tr >\n                    <th scope=\"row\">{index + 1}</th>\n                    <td>{item.title}</td>\n                    <td>{item.user.username}</td>\n                    <td>{item.begin_date}</td>\n                </tr>\n            )}\n        </tbody>\n      </table>\n      </div>\n    }","import React from 'react';\nimport './App.css';\n\n\nimport {ProjectComponent} from './projects'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n      <div>\n          <ProjectComponent />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEl\n  );\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}